// BEM selectors
@mixin e($element) {
	&__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media Queries

@mixin mq($break) {
  @if $break == "small" {
    @media(min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if  $break == "medium" {
    @media(min-width: $brkpoint-md + 1){
      @content;
    }
  }
  @else if $break == "large" {
    @media(min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error " Whoops! No value could be retrieved for `#{$break}.`";
  }
}



// Generate modifier color classes
@mixin bg-colors($map){
  @each $theme, $color in $map{
    &--#{$theme} {
      background-color: $color;
    }
  }
}

// Generating :before or :after pseudo-element shapes
@mixin p-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" {
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
	}
	@else {
    @error "`#{$el}` is not a valid pseudo-element.";
	}
}

// Image replacement
@mixin img-background($img, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  // width: $w;
  height: $h;
  display: $disp;
}

// Adjacent sibling margins
@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin; // le margin left sera appliq sur toutes les colonnes sauf la first
    @content;
  }
}

//  Grid columns

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    // global permet d'utiliser $context dans la mixin doubly plus bas
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    //  Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}
